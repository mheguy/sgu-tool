[tool.poetry]
name = "SGU"
version = "0.0.1"
package-mode = true
description = ""
authors = []
license = "CC0"
readme = "README.md"
packages = [{ include = "sgu" }]

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
feedparser = "^6.0.11"
requests = "^2.32.3"
python-dotenv = "^1.0.1"
beautifulsoup4 = "^4.12.3"
codetiming = "^1.4.0"
tqdm = "^4.66.4"
httpx = "^0.27.0"
ngrok = "^1.3.0"
mutagen = "^1.47.0"
flask = "^3.0.3"
pandas = "^2.2.2"
pyarrow = "^16.1.0"

[tool.poetry.group.ml.dependencies]
whisperx = { git = "https://github.com/m-bain/whisperx.git", markers = "sys_platform == 'linux'", rev = "f2da2f858e99e4211fe4f64b5f2938b007827e17" }
torchvision = { version = "^0.18.1", markers = "sys_platform == 'linux'" }
numpy = "<2.0.0"

[tool.poetry.group.stats.dependencies]
ipykernel = "^6.29.5"
pydub = "^0.25.1"

[tool.poetry.group.dev.dependencies]
ruff = "*"
coverage = "*"
pytest = "*"
pytest-icdiff = "*"
pytest-cov = "*"
pytest-randomly = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120

[tool.codespell]
skip = "poetry.lock,pyproject.toml"

[tool.coverage]
run.branch = true
run.relative_files = true
run.source = ["sgu_sof_tool"]
xml.output = "cov.xml"

[tool.coverage.report]
show_missing = true
skip_empty = true
omit = []
exclude_also = [
    "if TYPE_CHECKING:",
    "@(abc\\.)?abstractmethod",
    "NotImplementedError",
    "def __repr__",
    "if __name__ == .__main__.:",
]

[tool.pyright]
reportMissingImports = true
reportMissingTypeStubs = false
exclude = ["**/.*", "**/node_modules", "**/__pycache__"]

[tool.pytest]
ignore-glob = [".venv"]

[tool.pytest.ini_options]
addopts = ["--strict-markers"]
markers = []
filterwarnings = []
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.ruff]
line-length = 120
target-version = "py312"

[tool.ruff.format]
docstring-code-format = true
line-ending = "lf"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "A003",    # class-attr-shadows-builtin - the `id` and `type` attrs are too common to fight
    "ANN101",  # missing-type-self - static analyzers infer the type of self
    "ANN102",  # missing-type-cls - static analyzers infer the type of cls
    "ANN401",  # any-type - this is acceptable in some cases
    "D",       # doc - as the project is closed source, enforcing documentation makes no sense
    "D105",    # undocumented-magic-method - documenting magic methods is redundant
    "D107",    # undocumented-public-init - documenting init methods is redundant
    "DTZ",     # flake8-datetimez - we don't always want timezone-aware datetimes
    "EM",      # flake8-errmsg - tough to enforce
    "ERA",     # commented-out-code - sometimes commented out code is useful
    "FIX002",  # errors for todos
    "FBT",     # flake8-boolean-trap - not sure what this is meant to improve
    "ISC003",  # warnings when explicit string concat is used - some situations are better with explicit concat
    "PD901",   # gives a warning for using `df` as a variable name - df is a sensible name in most cases
    "PGH003",  # blanket-type-ignore - pylance doesn't have a way to disable a single rule on a single line
    "PLC0414", # removes aliases that do not rename original package - used for imports from packages
    "PLR0913", # too many arguments to function (including tests) - should not be a blocker
    "PT004",   # missing-fixture-name-underscore - adding underscore to names means IDEs will show them as unused
    "PTH123",  # open() should be replaced by Path.open() - we don't always want to create a Path object
    "S104",    # Possible binding to all interfaces - allowed as we are using docker containers
    "TD",      # rules related to TODOs in code
    "T20",     # makes using print and pprint an error
    "TRY003",  # warns for long messages when raising exceptions rather than in the class

    # These are ignored because we use Ruff to format code.
    "COM",
    "E501",

    # Project-specific rules
    # "EXE001", # Example
]
# Frustrating automatic fixes (ex. removing unused imports before you have a chance to use them)
unfixable = ["B007", "E712", "F401", "F841"]
exclude = [".venv"]
ignore-init-module-imports = true

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = true
mypy-init-return = true
suppress-dummy-args = true
suppress-none-returning = true

[tool.ruff.lint.flake8-pytest-style]
mark-parentheses = false
fixture-parentheses = true
parametrize-names-type = "csv"

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.lint.flake8-type-checking]
quote-annotations = true
runtime-evaluated-base-classes = [
    "pydantic.BaseModel",
    "sqlalchemy.orm.DeclarativeBase",
]

[tool.ruff.lint.isort]
known-first-party = ["sgu_sof_tool"]

[tool.ruff.lint.per-file-ignores]
# Rules for notebooks:
"*.ipynb" = ["PLE1142", "PLR2004", "S101", "S311"]
# Rules for tests:
"test_*.py" = ["ANN001", "ANN401", "D10", "PGH", "PLR2004", "S101", "SLF"]
# Rules for init files:
"__init__.py" = ["D10"]
# Project-specific rules:
# "main.py" = ["S101"]

[tool.ruff.lint.pydocstyle]
convention = "google"
